plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

static String terraformersUrl() {
	def url = "https://maven.terraformersmc.com/"
	def conn = new URL(url).openConnection()
	conn.connect()
	url = conn.getResponseCode() == 521 ? "https://raw.githubusercontent.com/TerraformersMC/Archive/main/releases" : url
	return url
}

repositories {
	maven { url = "https://maven.shedaniel.me/" }
	maven { url = terraformersUrl() }
	maven { url = "https://maven.ryanliptak.com/" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Mod Menu
	modApi("com.terraformersmc:modmenu:${project.modmenu_version}") { transitive false }

	// AppleSkin (API only, full mod used when using testmod)
	modApi("squeek.appleskin:appleskin-fabric:${project.appleskin_version}:api") { transitive false }

	// Config Screen
	modApi("me.shedaniel.cloth:cloth-config-lite-fabric:${project.cloth_lite_version}") { transitive false }
	include "me.shedaniel.cloth:cloth-config-lite-fabric:${project.cloth_lite_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()
	}
}
